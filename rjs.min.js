/*! micro-requirejs 2018-02-28 */
window.rjs = function (e, n) { "use strict"; var t = { debug: !1 }; return new function () { var n = new function () { return { eventStack: [], pendingListeners: [], reset: function () { this.eventStack = [], this.pendingListeners = [] }, resolvePendingListeners: function () { var e = this; this.pendingListeners.forEach(function (n, t) { n && e.isEveryEventResolved(n.events) && (n.handler(), delete e.pendingListeners[t]) }) }, isEveryEventResolved: function (e) { var n = this; return e.every(function (e) { return -1 !== n.eventStack.indexOf(e) }) }, trigger: function (e) { t.debug && console.log(">> `" + e + "` triggered"), this.eventStack.push(e), this.resolvePendingListeners() }, on: function (n, r) { if (t.debug && console.log(">> `" + e.JSON.stringify(n) + "` subscribed"), !Array.isArray(n)) throw new TypeError("The first parameter must an array"); if ("function" != typeof r) throw new TypeError("The second parameter must a function"); if (this.isEveryEventResolved(n)) return r(); this.pendingListeners.push({ events: n, handler: r }) } } }, r = function () { "complete" === e.document.readyState || "loaded" === e.document.readyState ? n.trigger("DOMContentLoaded") : e.document.addEventListener("DOMContentLoaded", function () { n.trigger("DOMContentLoaded") }, !1) }; return r(), { define: function (t, r, i, s) { var o, d = t.split(".").slice(-1)[0]; o = "css" == d ? e.document.createElement("link") : e.document.createElement("script"); var c = s ? i.bind(s) : i; if ("string" != typeof r) throw new TypeError("You have specify dependency name"); if ("css" == d ? (o.type = "text/css", o.rel = "stylesheet", o.href = t, o.async = !0) : (o.type = "text/javascript", o.src = t, o.async = !0), e.document.body.appendChild(o), void 0 !== o.onload) return o.onload = function () { n.trigger(r), c && c() }; o.onreadystatechange = function () { "loaded" === o.readyState && (n.trigger(r), c && c()) } }, require: function (e, t, r) { r && (t = t.bind(r)), n.on(e, t) }, init: function (e) { t = e || { debug: !1 }, n.reset(), r() } } } }(this);